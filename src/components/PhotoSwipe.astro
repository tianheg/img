---
import type { ImageMetadata } from 'astro';
import { Image, getImage } from 'astro:assets';
import Cloudflare from 'cloudflare';
import dotenv from 'dotenv';

dotenv.config();

interface Props {
	imageFolder: string;
}

const { imageFolder } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*/*');
const imagePaths = Object.keys(images).filter((imagePath) => {
	return imagePath.startsWith(`/src/assets/${imageFolder}/`);
});

// get alt text from Cloudflare KV
const client = new Cloudflare({
	apiToken: process.env.CF_KV_API_TOKEN,
});

const kvOptions = {
	account_id: 'b0dda00db555f237f277259bed93134b',
};
const altTexts = async () => {
	try {
		const data = await client.kv.namespaces.values.get(
			'da0d1ae333544faea791fb166dfbc01c',
			'img-altTexts',
			kvOptions,
		);
		return JSON.parse(JSON.stringify(data));
	} catch (error) {
		console.error(error);
		return [];
	}
};

const altTextData = await altTexts();
---

<div
	id="gallery"
	class="container mx-auto px-2 pb-2 grid grid-cols-2 md:grid-cols-3 gap-2"
>
	{
		await Promise.all(
			imagePaths.map(async (imagePath) => {
				let image = images[imagePath]();
				let optimizedImage = await getImage({
					src: image,
					width: 1920,
				});

				const altText = altTextData?.find(
					(item: { name: string; altText: string }) =>
						item.name === imagePath.split('/').pop(),
				)?.altText;

				return (
					<a
						href={optimizedImage.src}
						data-pswp-width={optimizedImage.attributes.width}
						data-pswp-height={optimizedImage.attributes.height}
						target="_blank"
						class="overflow-hidden rounded-md border-[1px] border-primary hover:border-secondary"
					>
						<Image
							src={image}
							alt={altText || ''}
							height={350}
							class={
								'object-cover w-full grayscale-[80%] hover:grayscale-0 transition duration-300 ease-in-out aspect-[3/2]'
							}
						/>
					</a>
				);
			}),
		)
	}
</div>

<script>
	import PhotoSwipeLightbox from 'photoswipe/lightbox';
	import PhotoSwipeDynamicCaption from 'photoswipe-dynamic-caption-plugin';
	import 'photoswipe/style.css';
	import 'photoswipe-dynamic-caption-plugin/photoswipe-dynamic-caption-plugin.css';

	let lightbox: PhotoSwipeLightbox;

	document.addEventListener('astro:page-load', () => {
		lightbox = new PhotoSwipeLightbox({
			gallery: '#gallery',
			children: 'a',
			pswpModule: () => import('photoswipe'),
			paddingFn: () => {
				return {
					top: 20,
					bottom: 20,
					left: 10,
					right: 10,
				};
			},
		});

		const captionPlugin = new PhotoSwipeDynamicCaption(lightbox, {
			type: 'auto',
		});
		captionContent: (slide: any) => {
			return slide.data.element.querySelector('img').getAttribute('alt');
		};

		lightbox.init();
	});

	document.addEventListener('astro:before-swap', () => {
		lightbox.destroy();
	});
</script>